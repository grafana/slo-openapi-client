/*
Grafana SLO API

This API CRUDs SLO objects for the Grafana plugin.  Modifying an SLO object will create or update recording and alerting rules in a connected Prometheus instance and create or update dashboards in Grafana.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
)

// checks if the AlertingMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertingMetadata{}

// AlertingMetadata struct for AlertingMetadata
type AlertingMetadata struct {
	Annotations []Label `json:"annotations,omitempty"`
	Labels interface{} `json:"labels,omitempty"`
}

// NewAlertingMetadata instantiates a new AlertingMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertingMetadata() *AlertingMetadata {
	this := AlertingMetadata{}
	return &this
}

// NewAlertingMetadataWithDefaults instantiates a new AlertingMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertingMetadataWithDefaults() *AlertingMetadata {
	this := AlertingMetadata{}
	return &this
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *AlertingMetadata) GetAnnotations() []Label {
	if o == nil || IsNil(o.Annotations) {
		var ret []Label
		return ret
	}
	return o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertingMetadata) GetAnnotationsOk() ([]Label, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *AlertingMetadata) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given []Label and assigns it to the Annotations field.
func (o *AlertingMetadata) SetAnnotations(v []Label) {
	o.Annotations = v
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertingMetadata) GetLabels() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertingMetadata) GetLabelsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return &o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *AlertingMetadata) HasLabels() bool {
	if o != nil && IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given interface{} and assigns it to the Labels field.
func (o *AlertingMetadata) SetLabels(v interface{}) {
	o.Labels = v
}

func (o AlertingMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertingMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	return toSerialize, nil
}

type NullableAlertingMetadata struct {
	value *AlertingMetadata
	isSet bool
}

func (v NullableAlertingMetadata) Get() *AlertingMetadata {
	return v.value
}

func (v *NullableAlertingMetadata) Set(val *AlertingMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertingMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertingMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertingMetadata(val *AlertingMetadata) *NullableAlertingMetadata {
	return &NullableAlertingMetadata{value: val, isSet: true}
}

func (v NullableAlertingMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertingMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


