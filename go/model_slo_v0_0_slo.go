/*
Grafana SLO API

This API CRUDs SLO objects for the Grafana plugin.  Modifying an SLO object will create or update recording and alerting rules in a connected Prometheus instance and create or update dashboards in Grafana.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SloV00Slo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloV00Slo{}

// SloV00Slo struct for SloV00Slo
type SloV00Slo struct {
	Alerting *SloV00Alerting `json:"alerting,omitempty"`
	Description string `json:"description"`
	DestinationDatasource *SloV00DestinationDatasource `json:"destinationDatasource,omitempty"`
	Folder *SloV00Folder `json:"folder,omitempty"`
	Labels []SloV00Label `json:"labels,omitempty"`
	Name string `json:"name"`
	Objectives []SloV00Objective `json:"objectives"`
	Query SloV00Query `json:"query"`
	ReadOnly *SloV00ReadOnly `json:"readOnly,omitempty"`
	SearchExpression *string `json:"searchExpression,omitempty"`
	Uuid string `json:"uuid"`
}

type _SloV00Slo SloV00Slo

// NewSloV00Slo instantiates a new SloV00Slo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloV00Slo(description string, name string, objectives []SloV00Objective, query SloV00Query, uuid string) *SloV00Slo {
	this := SloV00Slo{}
	this.Description = description
	this.Name = name
	this.Objectives = objectives
	this.Query = query
	this.Uuid = uuid
	return &this
}

// NewSloV00SloWithDefaults instantiates a new SloV00Slo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloV00SloWithDefaults() *SloV00Slo {
	this := SloV00Slo{}
	return &this
}

// GetAlerting returns the Alerting field value if set, zero value otherwise.
func (o *SloV00Slo) GetAlerting() SloV00Alerting {
	if o == nil || IsNil(o.Alerting) {
		var ret SloV00Alerting
		return ret
	}
	return *o.Alerting
}

// GetAlertingOk returns a tuple with the Alerting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloV00Slo) GetAlertingOk() (*SloV00Alerting, bool) {
	if o == nil || IsNil(o.Alerting) {
		return nil, false
	}
	return o.Alerting, true
}

// HasAlerting returns a boolean if a field has been set.
func (o *SloV00Slo) HasAlerting() bool {
	if o != nil && !IsNil(o.Alerting) {
		return true
	}

	return false
}

// SetAlerting gets a reference to the given SloV00Alerting and assigns it to the Alerting field.
func (o *SloV00Slo) SetAlerting(v SloV00Alerting) {
	o.Alerting = &v
}

// GetDescription returns the Description field value
func (o *SloV00Slo) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *SloV00Slo) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *SloV00Slo) SetDescription(v string) {
	o.Description = v
}

// GetDestinationDatasource returns the DestinationDatasource field value if set, zero value otherwise.
func (o *SloV00Slo) GetDestinationDatasource() SloV00DestinationDatasource {
	if o == nil || IsNil(o.DestinationDatasource) {
		var ret SloV00DestinationDatasource
		return ret
	}
	return *o.DestinationDatasource
}

// GetDestinationDatasourceOk returns a tuple with the DestinationDatasource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloV00Slo) GetDestinationDatasourceOk() (*SloV00DestinationDatasource, bool) {
	if o == nil || IsNil(o.DestinationDatasource) {
		return nil, false
	}
	return o.DestinationDatasource, true
}

// HasDestinationDatasource returns a boolean if a field has been set.
func (o *SloV00Slo) HasDestinationDatasource() bool {
	if o != nil && !IsNil(o.DestinationDatasource) {
		return true
	}

	return false
}

// SetDestinationDatasource gets a reference to the given SloV00DestinationDatasource and assigns it to the DestinationDatasource field.
func (o *SloV00Slo) SetDestinationDatasource(v SloV00DestinationDatasource) {
	o.DestinationDatasource = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *SloV00Slo) GetFolder() SloV00Folder {
	if o == nil || IsNil(o.Folder) {
		var ret SloV00Folder
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloV00Slo) GetFolderOk() (*SloV00Folder, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *SloV00Slo) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given SloV00Folder and assigns it to the Folder field.
func (o *SloV00Slo) SetFolder(v SloV00Folder) {
	o.Folder = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *SloV00Slo) GetLabels() []SloV00Label {
	if o == nil || IsNil(o.Labels) {
		var ret []SloV00Label
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloV00Slo) GetLabelsOk() ([]SloV00Label, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *SloV00Slo) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []SloV00Label and assigns it to the Labels field.
func (o *SloV00Slo) SetLabels(v []SloV00Label) {
	o.Labels = v
}

// GetName returns the Name field value
func (o *SloV00Slo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SloV00Slo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SloV00Slo) SetName(v string) {
	o.Name = v
}

// GetObjectives returns the Objectives field value
func (o *SloV00Slo) GetObjectives() []SloV00Objective {
	if o == nil {
		var ret []SloV00Objective
		return ret
	}

	return o.Objectives
}

// GetObjectivesOk returns a tuple with the Objectives field value
// and a boolean to check if the value has been set.
func (o *SloV00Slo) GetObjectivesOk() ([]SloV00Objective, bool) {
	if o == nil {
		return nil, false
	}
	return o.Objectives, true
}

// SetObjectives sets field value
func (o *SloV00Slo) SetObjectives(v []SloV00Objective) {
	o.Objectives = v
}

// GetQuery returns the Query field value
func (o *SloV00Slo) GetQuery() SloV00Query {
	if o == nil {
		var ret SloV00Query
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *SloV00Slo) GetQueryOk() (*SloV00Query, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *SloV00Slo) SetQuery(v SloV00Query) {
	o.Query = v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *SloV00Slo) GetReadOnly() SloV00ReadOnly {
	if o == nil || IsNil(o.ReadOnly) {
		var ret SloV00ReadOnly
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloV00Slo) GetReadOnlyOk() (*SloV00ReadOnly, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *SloV00Slo) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given SloV00ReadOnly and assigns it to the ReadOnly field.
func (o *SloV00Slo) SetReadOnly(v SloV00ReadOnly) {
	o.ReadOnly = &v
}

// GetSearchExpression returns the SearchExpression field value if set, zero value otherwise.
func (o *SloV00Slo) GetSearchExpression() string {
	if o == nil || IsNil(o.SearchExpression) {
		var ret string
		return ret
	}
	return *o.SearchExpression
}

// GetSearchExpressionOk returns a tuple with the SearchExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloV00Slo) GetSearchExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.SearchExpression) {
		return nil, false
	}
	return o.SearchExpression, true
}

// HasSearchExpression returns a boolean if a field has been set.
func (o *SloV00Slo) HasSearchExpression() bool {
	if o != nil && !IsNil(o.SearchExpression) {
		return true
	}

	return false
}

// SetSearchExpression gets a reference to the given string and assigns it to the SearchExpression field.
func (o *SloV00Slo) SetSearchExpression(v string) {
	o.SearchExpression = &v
}

// GetUuid returns the Uuid field value
func (o *SloV00Slo) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *SloV00Slo) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *SloV00Slo) SetUuid(v string) {
	o.Uuid = v
}

func (o SloV00Slo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloV00Slo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Alerting) {
		toSerialize["alerting"] = o.Alerting
	}
	toSerialize["description"] = o.Description
	if !IsNil(o.DestinationDatasource) {
		toSerialize["destinationDatasource"] = o.DestinationDatasource
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["name"] = o.Name
	toSerialize["objectives"] = o.Objectives
	toSerialize["query"] = o.Query
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if !IsNil(o.SearchExpression) {
		toSerialize["searchExpression"] = o.SearchExpression
	}
	toSerialize["uuid"] = o.Uuid
	return toSerialize, nil
}

func (o *SloV00Slo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"name",
		"objectives",
		"query",
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSloV00Slo := _SloV00Slo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSloV00Slo)

	if err != nil {
		return err
	}

	*o = SloV00Slo(varSloV00Slo)

	return err
}

type NullableSloV00Slo struct {
	value *SloV00Slo
	isSet bool
}

func (v NullableSloV00Slo) Get() *SloV00Slo {
	return v.value
}

func (v *NullableSloV00Slo) Set(val *SloV00Slo) {
	v.value = val
	v.isSet = true
}

func (v NullableSloV00Slo) IsSet() bool {
	return v.isSet
}

func (v *NullableSloV00Slo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloV00Slo(val *SloV00Slo) *NullableSloV00Slo {
	return &NullableSloV00Slo{value: val, isSet: true}
}

func (v NullableSloV00Slo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloV00Slo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


