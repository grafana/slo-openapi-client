/*
Grafana SLO API

This API CRUDs SLO objects for the Grafana plugin.  Modifying an SLO object will create or update recording and alerting rules in a connected Prometheus instance and create or update dashboards in Grafana.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FreeformQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FreeformQuery{}

// FreeformQuery struct for FreeformQuery
type FreeformQuery struct {
	Query string `json:"query"`
}

type _FreeformQuery FreeformQuery

// NewFreeformQuery instantiates a new FreeformQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFreeformQuery(query string) *FreeformQuery {
	this := FreeformQuery{}
	this.Query = query
	return &this
}

// NewFreeformQueryWithDefaults instantiates a new FreeformQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFreeformQueryWithDefaults() *FreeformQuery {
	this := FreeformQuery{}
	return &this
}

// GetQuery returns the Query field value
func (o *FreeformQuery) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *FreeformQuery) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *FreeformQuery) SetQuery(v string) {
	o.Query = v
}

func (o FreeformQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FreeformQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["query"] = o.Query
	return toSerialize, nil
}

func (o *FreeformQuery) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"query",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFreeformQuery := _FreeformQuery{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFreeformQuery)

	if err != nil {
		return err
	}

	*o = FreeformQuery(varFreeformQuery)

	return err
}

type NullableFreeformQuery struct {
	value *FreeformQuery
	isSet bool
}

func (v NullableFreeformQuery) Get() *FreeformQuery {
	return v.value
}

func (v *NullableFreeformQuery) Set(val *FreeformQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableFreeformQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableFreeformQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFreeformQuery(val *FreeformQuery) *NullableFreeformQuery {
	return &NullableFreeformQuery{value: val, isSet: true}
}

func (v NullableFreeformQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFreeformQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


