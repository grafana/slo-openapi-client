/*
Grafana SLO API

This API CRUDs SLO objects for the Grafana plugin.  Modifying an SLO object will create or update recording and alerting rules in a connected Prometheus instance and create or update dashboards in Grafana.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SloV00HistogramQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloV00HistogramQuery{}

// SloV00HistogramQuery struct for SloV00HistogramQuery
type SloV00HistogramQuery struct {
	GroupByLabels []string `json:"groupByLabels,omitempty"`
	Metric SloV00MetricDef `json:"metric"`
	Percentile float64 `json:"percentile"`
	Threshold SloV00Threshold `json:"threshold"`
}

type _SloV00HistogramQuery SloV00HistogramQuery

// NewSloV00HistogramQuery instantiates a new SloV00HistogramQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloV00HistogramQuery(metric SloV00MetricDef, percentile float64, threshold SloV00Threshold) *SloV00HistogramQuery {
	this := SloV00HistogramQuery{}
	this.Metric = metric
	this.Percentile = percentile
	this.Threshold = threshold
	return &this
}

// NewSloV00HistogramQueryWithDefaults instantiates a new SloV00HistogramQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloV00HistogramQueryWithDefaults() *SloV00HistogramQuery {
	this := SloV00HistogramQuery{}
	return &this
}

// GetGroupByLabels returns the GroupByLabels field value if set, zero value otherwise.
func (o *SloV00HistogramQuery) GetGroupByLabels() []string {
	if o == nil || IsNil(o.GroupByLabels) {
		var ret []string
		return ret
	}
	return o.GroupByLabels
}

// GetGroupByLabelsOk returns a tuple with the GroupByLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloV00HistogramQuery) GetGroupByLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.GroupByLabels) {
		return nil, false
	}
	return o.GroupByLabels, true
}

// HasGroupByLabels returns a boolean if a field has been set.
func (o *SloV00HistogramQuery) HasGroupByLabels() bool {
	if o != nil && !IsNil(o.GroupByLabels) {
		return true
	}

	return false
}

// SetGroupByLabels gets a reference to the given []string and assigns it to the GroupByLabels field.
func (o *SloV00HistogramQuery) SetGroupByLabels(v []string) {
	o.GroupByLabels = v
}

// GetMetric returns the Metric field value
func (o *SloV00HistogramQuery) GetMetric() SloV00MetricDef {
	if o == nil {
		var ret SloV00MetricDef
		return ret
	}

	return o.Metric
}

// GetMetricOk returns a tuple with the Metric field value
// and a boolean to check if the value has been set.
func (o *SloV00HistogramQuery) GetMetricOk() (*SloV00MetricDef, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metric, true
}

// SetMetric sets field value
func (o *SloV00HistogramQuery) SetMetric(v SloV00MetricDef) {
	o.Metric = v
}

// GetPercentile returns the Percentile field value
func (o *SloV00HistogramQuery) GetPercentile() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Percentile
}

// GetPercentileOk returns a tuple with the Percentile field value
// and a boolean to check if the value has been set.
func (o *SloV00HistogramQuery) GetPercentileOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentile, true
}

// SetPercentile sets field value
func (o *SloV00HistogramQuery) SetPercentile(v float64) {
	o.Percentile = v
}

// GetThreshold returns the Threshold field value
func (o *SloV00HistogramQuery) GetThreshold() SloV00Threshold {
	if o == nil {
		var ret SloV00Threshold
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *SloV00HistogramQuery) GetThresholdOk() (*SloV00Threshold, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threshold, true
}

// SetThreshold sets field value
func (o *SloV00HistogramQuery) SetThreshold(v SloV00Threshold) {
	o.Threshold = v
}

func (o SloV00HistogramQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloV00HistogramQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupByLabels) {
		toSerialize["groupByLabels"] = o.GroupByLabels
	}
	toSerialize["metric"] = o.Metric
	toSerialize["percentile"] = o.Percentile
	toSerialize["threshold"] = o.Threshold
	return toSerialize, nil
}

func (o *SloV00HistogramQuery) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metric",
		"percentile",
		"threshold",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSloV00HistogramQuery := _SloV00HistogramQuery{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSloV00HistogramQuery)

	if err != nil {
		return err
	}

	*o = SloV00HistogramQuery(varSloV00HistogramQuery)

	return err
}

type NullableSloV00HistogramQuery struct {
	value *SloV00HistogramQuery
	isSet bool
}

func (v NullableSloV00HistogramQuery) Get() *SloV00HistogramQuery {
	return v.value
}

func (v *NullableSloV00HistogramQuery) Set(val *SloV00HistogramQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableSloV00HistogramQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableSloV00HistogramQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloV00HistogramQuery(val *SloV00HistogramQuery) *NullableSloV00HistogramQuery {
	return &NullableSloV00HistogramQuery{value: val, isSet: true}
}

func (v NullableSloV00HistogramQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloV00HistogramQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


