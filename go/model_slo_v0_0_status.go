/*
Grafana SLO API

This API CRUDs SLO objects for the Grafana plugin.  Modifying an SLO object will create or update recording and alerting rules in a connected Prometheus instance and create or update dashboards in Grafana.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"bytes"
	"encoding/json"
)

// checks if the SloV00Status type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloV00Status{}

// SloV00Status struct for SloV00Status
type SloV00Status struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

type _SloV00Status SloV00Status

// NewSloV00Status instantiates a new SloV00Status object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloV00Status(type_ string) *SloV00Status {
	this := SloV00Status{}
	this.Type = type_
	return &this
}

// NewSloV00StatusWithDefaults instantiates a new SloV00Status object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloV00StatusWithDefaults() *SloV00Status {
	this := SloV00Status{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *SloV00Status) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloV00Status) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *SloV00Status) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *SloV00Status) SetMessage(v string) {
	o.Message = &v
}

// GetType returns the Type field value
func (o *SloV00Status) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SloV00Status) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SloV00Status) SetType(v string) {
	o.Type = v
}

func (o SloV00Status) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloV00Status) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *SloV00Status) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varSloV00Status := _SloV00Status{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varSloV00Status)

	if err != nil {
		return err
	}

	*o = SloV00Status(varSloV00Status)

	return err
}

type NullableSloV00Status struct {
	value *SloV00Status
	isSet bool
}

func (v NullableSloV00Status) Get() *SloV00Status {
	return v.value
}

func (v *NullableSloV00Status) Set(val *SloV00Status) {
	v.value = val
	v.isSet = true
}

func (v NullableSloV00Status) IsSet() bool {
	return v.isSet
}

func (v *NullableSloV00Status) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloV00Status(val *SloV00Status) *NullableSloV00Status {
	return &NullableSloV00Status{value: val, isSet: true}
}

func (v NullableSloV00Status) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloV00Status) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
