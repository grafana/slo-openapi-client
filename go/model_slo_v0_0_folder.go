/*
Grafana SLO API

This API CRUDs SLO objects for the Grafana plugin.  Modifying an SLO object will create or update recording and alerting rules in a connected Prometheus instance and create or update dashboards in Grafana.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
)

// checks if the SloV00Folder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloV00Folder{}

// SloV00Folder struct for SloV00Folder
type SloV00Folder struct {
	Uid *string `json:"uid,omitempty"`
}

// NewSloV00Folder instantiates a new SloV00Folder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloV00Folder() *SloV00Folder {
	this := SloV00Folder{}
	return &this
}

// NewSloV00FolderWithDefaults instantiates a new SloV00Folder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloV00FolderWithDefaults() *SloV00Folder {
	this := SloV00Folder{}
	return &this
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *SloV00Folder) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloV00Folder) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *SloV00Folder) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *SloV00Folder) SetUid(v string) {
	o.Uid = &v
}

func (o SloV00Folder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloV00Folder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	return toSerialize, nil
}

type NullableSloV00Folder struct {
	value *SloV00Folder
	isSet bool
}

func (v NullableSloV00Folder) Get() *SloV00Folder {
	return v.value
}

func (v *NullableSloV00Folder) Set(val *SloV00Folder) {
	v.value = val
	v.isSet = true
}

func (v NullableSloV00Folder) IsSet() bool {
	return v.isSet
}

func (v *NullableSloV00Folder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloV00Folder(val *SloV00Folder) *NullableSloV00Folder {
	return &NullableSloV00Folder{value: val, isSet: true}
}

func (v NullableSloV00Folder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloV00Folder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


