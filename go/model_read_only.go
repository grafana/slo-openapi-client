/*
Grafana SLO API

This API CRUDs SLO objects for the Grafana plugin.  Modifying an SLO object will create or update recording and alerting rules in a connected Prometheus instance and create or update dashboards in Grafana.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
)

// checks if the ReadOnly type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReadOnly{}

// ReadOnly struct for ReadOnly
type ReadOnly struct {
	DrillDownDashboardRef *DashboardRef `json:"drillDownDashboardRef,omitempty"`
	Provenance *string `json:"provenance,omitempty"`
	Status *Status `json:"status,omitempty"`
}

// NewReadOnly instantiates a new ReadOnly object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReadOnly() *ReadOnly {
	this := ReadOnly{}
	return &this
}

// NewReadOnlyWithDefaults instantiates a new ReadOnly object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReadOnlyWithDefaults() *ReadOnly {
	this := ReadOnly{}
	return &this
}

// GetDrillDownDashboardRef returns the DrillDownDashboardRef field value if set, zero value otherwise.
func (o *ReadOnly) GetDrillDownDashboardRef() DashboardRef {
	if o == nil || IsNil(o.DrillDownDashboardRef) {
		var ret DashboardRef
		return ret
	}
	return *o.DrillDownDashboardRef
}

// GetDrillDownDashboardRefOk returns a tuple with the DrillDownDashboardRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadOnly) GetDrillDownDashboardRefOk() (*DashboardRef, bool) {
	if o == nil || IsNil(o.DrillDownDashboardRef) {
		return nil, false
	}
	return o.DrillDownDashboardRef, true
}

// HasDrillDownDashboardRef returns a boolean if a field has been set.
func (o *ReadOnly) HasDrillDownDashboardRef() bool {
	if o != nil && !IsNil(o.DrillDownDashboardRef) {
		return true
	}

	return false
}

// SetDrillDownDashboardRef gets a reference to the given DashboardRef and assigns it to the DrillDownDashboardRef field.
func (o *ReadOnly) SetDrillDownDashboardRef(v DashboardRef) {
	o.DrillDownDashboardRef = &v
}

// GetProvenance returns the Provenance field value if set, zero value otherwise.
func (o *ReadOnly) GetProvenance() string {
	if o == nil || IsNil(o.Provenance) {
		var ret string
		return ret
	}
	return *o.Provenance
}

// GetProvenanceOk returns a tuple with the Provenance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadOnly) GetProvenanceOk() (*string, bool) {
	if o == nil || IsNil(o.Provenance) {
		return nil, false
	}
	return o.Provenance, true
}

// HasProvenance returns a boolean if a field has been set.
func (o *ReadOnly) HasProvenance() bool {
	if o != nil && !IsNil(o.Provenance) {
		return true
	}

	return false
}

// SetProvenance gets a reference to the given string and assigns it to the Provenance field.
func (o *ReadOnly) SetProvenance(v string) {
	o.Provenance = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ReadOnly) GetStatus() Status {
	if o == nil || IsNil(o.Status) {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadOnly) GetStatusOk() (*Status, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ReadOnly) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *ReadOnly) SetStatus(v Status) {
	o.Status = &v
}

func (o ReadOnly) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReadOnly) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DrillDownDashboardRef) {
		toSerialize["drillDownDashboardRef"] = o.DrillDownDashboardRef
	}
	if !IsNil(o.Provenance) {
		toSerialize["provenance"] = o.Provenance
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableReadOnly struct {
	value *ReadOnly
	isSet bool
}

func (v NullableReadOnly) Get() *ReadOnly {
	return v.value
}

func (v *NullableReadOnly) Set(val *ReadOnly) {
	v.value = val
	v.isSet = true
}

func (v NullableReadOnly) IsSet() bool {
	return v.isSet
}

func (v *NullableReadOnly) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadOnly(val *ReadOnly) *NullableReadOnly {
	return &NullableReadOnly{value: val, isSet: true}
}

func (v NullableReadOnly) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadOnly) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


