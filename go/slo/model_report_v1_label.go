/*
Grafana SLO API

This API CRUDs SLO objects for the Grafana plugin.  Modifying an SLO object will create or update recording and alerting rules in a connected Prometheus instance and create or update dashboards in Grafana.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"bytes"
	"encoding/json"
)

// checks if the ReportV1Label type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportV1Label{}

// ReportV1Label struct for ReportV1Label
type ReportV1Label struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type _ReportV1Label ReportV1Label

// NewReportV1Label instantiates a new ReportV1Label object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportV1Label(key string, value string) *ReportV1Label {
	this := ReportV1Label{}
	this.Key = key
	this.Value = value
	return &this
}

// NewReportV1LabelWithDefaults instantiates a new ReportV1Label object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportV1LabelWithDefaults() *ReportV1Label {
	this := ReportV1Label{}
	return &this
}

// GetKey returns the Key field value
func (o *ReportV1Label) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ReportV1Label) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ReportV1Label) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *ReportV1Label) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ReportV1Label) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ReportV1Label) SetValue(v string) {
	o.Value = v
}

func (o ReportV1Label) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportV1Label) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *ReportV1Label) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varReportV1Label := _ReportV1Label{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varReportV1Label)

	if err != nil {
		return err
	}

	*o = ReportV1Label(varReportV1Label)

	return err
}

type NullableReportV1Label struct {
	value *ReportV1Label
	isSet bool
}

func (v NullableReportV1Label) Get() *ReportV1Label {
	return v.value
}

func (v *NullableReportV1Label) Set(val *ReportV1Label) {
	v.value = val
	v.isSet = true
}

func (v NullableReportV1Label) IsSet() bool {
	return v.isSet
}

func (v *NullableReportV1Label) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportV1Label(val *ReportV1Label) *NullableReportV1Label {
	return &NullableReportV1Label{value: val, isSet: true}
}

func (v NullableReportV1Label) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportV1Label) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
