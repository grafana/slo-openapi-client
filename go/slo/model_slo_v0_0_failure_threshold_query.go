/*
Grafana SLO API

This API CRUDs SLO objects for the Grafana plugin.  Modifying an SLO object will create or update recording and alerting rules in a connected Prometheus instance and create or update dashboards in Grafana.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"bytes"
	"encoding/json"
)

// checks if the SloV00FailureThresholdQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloV00FailureThresholdQuery{}

// SloV00FailureThresholdQuery struct for SloV00FailureThresholdQuery
type SloV00FailureThresholdQuery struct {
	FailureThresholdExpression string          `json:"failureThresholdExpression"`
	GroupByLabels              []string        `json:"groupByLabels,omitempty"`
	Threshold                  SloV00Threshold `json:"threshold"`
}

type _SloV00FailureThresholdQuery SloV00FailureThresholdQuery

// NewSloV00FailureThresholdQuery instantiates a new SloV00FailureThresholdQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloV00FailureThresholdQuery(failureThresholdExpression string, threshold SloV00Threshold) *SloV00FailureThresholdQuery {
	this := SloV00FailureThresholdQuery{}
	this.FailureThresholdExpression = failureThresholdExpression
	this.Threshold = threshold
	return &this
}

// NewSloV00FailureThresholdQueryWithDefaults instantiates a new SloV00FailureThresholdQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloV00FailureThresholdQueryWithDefaults() *SloV00FailureThresholdQuery {
	this := SloV00FailureThresholdQuery{}
	return &this
}

// GetFailureThresholdExpression returns the FailureThresholdExpression field value
func (o *SloV00FailureThresholdQuery) GetFailureThresholdExpression() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FailureThresholdExpression
}

// GetFailureThresholdExpressionOk returns a tuple with the FailureThresholdExpression field value
// and a boolean to check if the value has been set.
func (o *SloV00FailureThresholdQuery) GetFailureThresholdExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailureThresholdExpression, true
}

// SetFailureThresholdExpression sets field value
func (o *SloV00FailureThresholdQuery) SetFailureThresholdExpression(v string) {
	o.FailureThresholdExpression = v
}

// GetGroupByLabels returns the GroupByLabels field value if set, zero value otherwise.
func (o *SloV00FailureThresholdQuery) GetGroupByLabels() []string {
	if o == nil || IsNil(o.GroupByLabels) {
		var ret []string
		return ret
	}
	return o.GroupByLabels
}

// GetGroupByLabelsOk returns a tuple with the GroupByLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloV00FailureThresholdQuery) GetGroupByLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.GroupByLabels) {
		return nil, false
	}
	return o.GroupByLabels, true
}

// HasGroupByLabels returns a boolean if a field has been set.
func (o *SloV00FailureThresholdQuery) HasGroupByLabels() bool {
	if o != nil && !IsNil(o.GroupByLabels) {
		return true
	}

	return false
}

// SetGroupByLabels gets a reference to the given []string and assigns it to the GroupByLabels field.
func (o *SloV00FailureThresholdQuery) SetGroupByLabels(v []string) {
	o.GroupByLabels = v
}

// GetThreshold returns the Threshold field value
func (o *SloV00FailureThresholdQuery) GetThreshold() SloV00Threshold {
	if o == nil {
		var ret SloV00Threshold
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *SloV00FailureThresholdQuery) GetThresholdOk() (*SloV00Threshold, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threshold, true
}

// SetThreshold sets field value
func (o *SloV00FailureThresholdQuery) SetThreshold(v SloV00Threshold) {
	o.Threshold = v
}

func (o SloV00FailureThresholdQuery) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloV00FailureThresholdQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["failureThresholdExpression"] = o.FailureThresholdExpression
	if !IsNil(o.GroupByLabels) {
		toSerialize["groupByLabels"] = o.GroupByLabels
	}
	toSerialize["threshold"] = o.Threshold
	return toSerialize, nil
}

func (o *SloV00FailureThresholdQuery) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varSloV00FailureThresholdQuery := _SloV00FailureThresholdQuery{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varSloV00FailureThresholdQuery)

	if err != nil {
		return err
	}

	*o = SloV00FailureThresholdQuery(varSloV00FailureThresholdQuery)

	return err
}

type NullableSloV00FailureThresholdQuery struct {
	value *SloV00FailureThresholdQuery
	isSet bool
}

func (v NullableSloV00FailureThresholdQuery) Get() *SloV00FailureThresholdQuery {
	return v.value
}

func (v *NullableSloV00FailureThresholdQuery) Set(val *SloV00FailureThresholdQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableSloV00FailureThresholdQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableSloV00FailureThresholdQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloV00FailureThresholdQuery(val *SloV00FailureThresholdQuery) *NullableSloV00FailureThresholdQuery {
	return &NullableSloV00FailureThresholdQuery{value: val, isSet: true}
}

func (v NullableSloV00FailureThresholdQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloV00FailureThresholdQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
