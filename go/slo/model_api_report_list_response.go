/*
Grafana SLO API

This API CRUDs SLO objects for the Grafana plugin.  Modifying an SLO object will create or update recording and alerting rules in a connected Prometheus instance and create or update dashboards in Grafana.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"bytes"
	"encoding/json"
)

// checks if the ApiReportListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiReportListResponse{}

// ApiReportListResponse struct for ApiReportListResponse
type ApiReportListResponse struct {
	Reports []ReportV1Report `json:"reports"`
}

type _ApiReportListResponse ApiReportListResponse

// NewApiReportListResponse instantiates a new ApiReportListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiReportListResponse(reports []ReportV1Report) *ApiReportListResponse {
	this := ApiReportListResponse{}
	this.Reports = reports
	return &this
}

// NewApiReportListResponseWithDefaults instantiates a new ApiReportListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiReportListResponseWithDefaults() *ApiReportListResponse {
	this := ApiReportListResponse{}
	return &this
}

// GetReports returns the Reports field value
func (o *ApiReportListResponse) GetReports() []ReportV1Report {
	if o == nil {
		var ret []ReportV1Report
		return ret
	}

	return o.Reports
}

// GetReportsOk returns a tuple with the Reports field value
// and a boolean to check if the value has been set.
func (o *ApiReportListResponse) GetReportsOk() ([]ReportV1Report, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reports, true
}

// SetReports sets field value
func (o *ApiReportListResponse) SetReports(v []ReportV1Report) {
	o.Reports = v
}

func (o ApiReportListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiReportListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reports"] = o.Reports
	return toSerialize, nil
}

func (o *ApiReportListResponse) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varApiReportListResponse := _ApiReportListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varApiReportListResponse)

	if err != nil {
		return err
	}

	*o = ApiReportListResponse(varApiReportListResponse)

	return err
}

type NullableApiReportListResponse struct {
	value *ApiReportListResponse
	isSet bool
}

func (v NullableApiReportListResponse) Get() *ApiReportListResponse {
	return v.value
}

func (v *NullableApiReportListResponse) Set(val *ApiReportListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableApiReportListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableApiReportListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiReportListResponse(val *ApiReportListResponse) *NullableApiReportListResponse {
	return &NullableApiReportListResponse{value: val, isSet: true}
}

func (v NullableApiReportListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiReportListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
