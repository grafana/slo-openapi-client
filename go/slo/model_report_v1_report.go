/*
Grafana SLO API

This API CRUDs SLO objects for the Grafana plugin.  Modifying an SLO object will create or update recording and alerting rules in a connected Prometheus instance and create or update dashboards in Grafana.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"bytes"
	"encoding/json"
)

// checks if the ReportV1Report type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportV1Report{}

// ReportV1Report struct for ReportV1Report
type ReportV1Report struct {
	Description      string                          `json:"description"`
	Labels           []ReportV1Label                 `json:"labels,omitempty"`
	Name             string                          `json:"name"`
	ReportDefinition ReportV1ReportDefinitionSloList `json:"reportDefinition"`
	TimeSpan         string                          `json:"timeSpan"`
	Uuid             string                          `json:"uuid"`
}

type _ReportV1Report ReportV1Report

// NewReportV1Report instantiates a new ReportV1Report object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportV1Report(description string, name string, reportDefinition ReportV1ReportDefinitionSloList, timeSpan string, uuid string) *ReportV1Report {
	this := ReportV1Report{}
	this.Description = description
	this.Name = name
	this.ReportDefinition = reportDefinition
	this.TimeSpan = timeSpan
	this.Uuid = uuid
	return &this
}

// NewReportV1ReportWithDefaults instantiates a new ReportV1Report object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportV1ReportWithDefaults() *ReportV1Report {
	this := ReportV1Report{}
	return &this
}

// GetDescription returns the Description field value
func (o *ReportV1Report) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ReportV1Report) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ReportV1Report) SetDescription(v string) {
	o.Description = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ReportV1Report) GetLabels() []ReportV1Label {
	if o == nil || IsNil(o.Labels) {
		var ret []ReportV1Label
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportV1Report) GetLabelsOk() ([]ReportV1Label, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ReportV1Report) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []ReportV1Label and assigns it to the Labels field.
func (o *ReportV1Report) SetLabels(v []ReportV1Label) {
	o.Labels = v
}

// GetName returns the Name field value
func (o *ReportV1Report) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ReportV1Report) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ReportV1Report) SetName(v string) {
	o.Name = v
}

// GetReportDefinition returns the ReportDefinition field value
func (o *ReportV1Report) GetReportDefinition() ReportV1ReportDefinitionSloList {
	if o == nil {
		var ret ReportV1ReportDefinitionSloList
		return ret
	}

	return o.ReportDefinition
}

// GetReportDefinitionOk returns a tuple with the ReportDefinition field value
// and a boolean to check if the value has been set.
func (o *ReportV1Report) GetReportDefinitionOk() (*ReportV1ReportDefinitionSloList, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportDefinition, true
}

// SetReportDefinition sets field value
func (o *ReportV1Report) SetReportDefinition(v ReportV1ReportDefinitionSloList) {
	o.ReportDefinition = v
}

// GetTimeSpan returns the TimeSpan field value
func (o *ReportV1Report) GetTimeSpan() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeSpan
}

// GetTimeSpanOk returns a tuple with the TimeSpan field value
// and a boolean to check if the value has been set.
func (o *ReportV1Report) GetTimeSpanOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeSpan, true
}

// SetTimeSpan sets field value
func (o *ReportV1Report) SetTimeSpan(v string) {
	o.TimeSpan = v
}

// GetUuid returns the Uuid field value
func (o *ReportV1Report) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *ReportV1Report) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *ReportV1Report) SetUuid(v string) {
	o.Uuid = v
}

func (o ReportV1Report) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportV1Report) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["name"] = o.Name
	toSerialize["reportDefinition"] = o.ReportDefinition
	toSerialize["timeSpan"] = o.TimeSpan
	toSerialize["uuid"] = o.Uuid
	return toSerialize, nil
}

func (o *ReportV1Report) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varReportV1Report := _ReportV1Report{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varReportV1Report)

	if err != nil {
		return err
	}

	*o = ReportV1Report(varReportV1Report)

	return err
}

type NullableReportV1Report struct {
	value *ReportV1Report
	isSet bool
}

func (v NullableReportV1Report) Get() *ReportV1Report {
	return v.value
}

func (v *NullableReportV1Report) Set(val *ReportV1Report) {
	v.value = val
	v.isSet = true
}

func (v NullableReportV1Report) IsSet() bool {
	return v.isSet
}

func (v *NullableReportV1Report) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportV1Report(val *ReportV1Report) *NullableReportV1Report {
	return &NullableReportV1Report{value: val, isSet: true}
}

func (v NullableReportV1Report) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportV1Report) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
